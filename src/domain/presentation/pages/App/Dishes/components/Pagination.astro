---
import { api } from "@/domain/lib/api";
import { Skeleton } from "@/external/components/ui/skeleton";

interface Props {
  initialDishes?: Dish[];
}

async function fetchDishes(page = 1, cookies: AstroCookies) {
  try {
    const { data } = await api.get<ResponseApi<Dish[]>>(
      `/dishes?page=${page}`,
      {},
      cookies
    );
    return data.data || [];
  } catch (error) {
    console.error("Error fetching dishes:", error);
    return [];
  }
}

const { initialDishes = [] } = Astro.props as Props;
const page = 1; // You can make this dynamic if needed
const dishes =
  initialDishes.length > 0
    ? initialDishes
    : await fetchDishes(page, Astro.cookies);
---

<div class="flex flex-col">
  {dishes.length === 0 && <Skeleton class="h-10 w-full rounded-lg" />}

  {
    dishes.length > 0 && (
      <div class="flex flex-col gap-4">
        {dishes.map((dish: any) => (
          <div key={dish.id} class="flex flex-col gap-2">
            <h2 class="text-lg font-bold">{dish.title}</h2>
          </div>
        ))}
      </div>
    )
  }
</div>
